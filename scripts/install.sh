#!/usr/bin/env bash

# Content to append for bash and zsh
to_write_sh=$(cat << 'EOF'

############################################
# AUTOMATICALLY GENERATED BY SEVP
############################################

function _sevp() {
    if [[ -f ~/.sevp ]]; then
        eval "$(cat ~/.sevp)"
    fi
}

# Add hook for zsh
if [[ -n "${ZSH_VERSION}" ]]; then
    precmd_functions+=(_sevp)
# Add hook for bash
elif [[ -n "${BASH_VERSION}" ]]; then
    PROMPT_COMMAND="_sevp; ${PROMPT_COMMAND}"
fi

# DELETE UNTIL HERE TO UNINSTALL SEVP SHELLHOOK

EOF
)

# Content to append for fish
to_write_fish=$(cat << 'EOF'

############################################
# AUTOMATICALLY GENERATED BY SEVP
############################################

function _sevp
    if test -f ~/.sevp
        eval (cat ~/.sevp)
    end
end

# Add _sevp function to fish_prompt
function fish_prompt
    _sevp
    # Call the original prompt
    command fish_prompt $argv
end

# DELETE UNTIL HERE TO UNINSTALL SEVP SHELLHOOK

EOF
)

# Content to append for nushell
to_write_nu=$(cat << 'EOF'

############################################
# AUTOMATICALLY GENERATED BY SEVP
############################################

# Add a hook to run the sevp function on prompt execution
let-env PROMPT_HOOK = {|
    if test (ls ~/.sevp | is-empty) == $false {
        nu --eval $(cat ~/.sevp | str collect ' ')
    }
|}

# DELETE UNTIL HERE TO UNINSTALL SEVP SHELLHOOK

EOF
)

# Determine the current shell and target file
case "$SHELL" in
    *zsh)
        target_file="$HOME/.zshrc"
        to_write="$to_write_sh"
        ;;
    *bash)
        target_file="$HOME/.bashrc"
        to_write="$to_write_sh"
        ;;
    *fish)
        target_file="$HOME/.config/fish/config.fish"
        to_write="$to_write_fish"
        ;;
    *nu)
        target_file="$HOME/.config/nushell/config.nu"
        to_write="$to_write_nu"
        ;;
    *)
        echo "Unsupported shell. Only bash, zsh, fish, and nushell are supported."
        exit 1
        ;;
esac

# Add shell hook if not already present
if [[ -f "$target_file" ]]; then
    if grep -q "sevp" "$target_file"; then
        echo "sevp shellhook already in $target_file"
    else
        echo "$to_write" >> "$target_file"
        echo "Added shell hook to $target_file"
    fi
else
    echo "No $target_file found"
fi
